{"ast":null,"code":"import { ethers } from 'ethers'; // Import ABI Code to interact with smart contract\n\nimport EventTicketing from '../artifacts/contracts/EventTicketing.sol/EventTicketing.json'; // The contract address\n\nconst EVENT_TICKETING_ADDRESS = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\"; // Requests access to the user's MetaMask Account\n\nasync function requestAccount() {\n  await window.ethereum.request({\n    method: \"eth_requestAccounts\"\n  });\n}\n\nasync function createEvent(name, description, imageUrl, date, totalTickets, ticketPrice) {\n  // If MetaMask exists\n  if (typeof window.ethereum !== \"undefined\") {\n    await requestAccount();\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(EVENT_TICKETING_ADDRESS, EventTicketing.abi, signer);\n    const formattedTicketPrice = ethers.utils.parseEther(`${ticketPrice}`);\n\n    try {\n      const transaction = await contract.createEvent(name, description, imageUrl, date, totalTickets, formattedTicketPrice);\n      await transaction.wait();\n    } catch (error) {\n      console.log(\"Error: \", error);\n    }\n  }\n}\n\nasync function purchaseTicket(eventId, ticketPrice) {\n  // If MetaMask exists\n  if (typeof window.ethereum !== \"undefined\") {\n    await requestAccount();\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(EVENT_TICKETING_ADDRESS, EventTicketing.abi, signer);\n    const formattedTicketPrice = ethers.utils.parseEther(`${ticketPrice}`);\n\n    try {\n      const transaction = await contract.purchaseTicket(eventId, {\n        value: formattedTicketPrice\n      });\n      await transaction.wait();\n      console.log({\n        transaction\n      });\n    } catch (error) {\n      console.log(\"Error: \", error);\n    }\n  }\n}\n\nasync function enterEvent(ticketId) {\n  // If MetaMask exists\n  if (typeof window.ethereum !== \"undefined\") {\n    await requestAccount();\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(EVENT_TICKETING_ADDRESS, EventTicketing.abi, signer);\n\n    try {\n      const transaction = await contract.enterEvent(ticketId);\n      await transaction.wait();\n    } catch (error) {\n      console.log(\"Error: \", error);\n    }\n  }\n}\n\nasync function closeEvent(eventId) {\n  // If MetaMask exists\n  if (typeof window.ethereum !== \"undefined\") {\n    await requestAccount();\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(EVENT_TICKETING_ADDRESS, EventTicketing.abi, signer);\n\n    try {\n      const transaction = await contract.closeEvent(eventId);\n      await transaction.wait();\n    } catch (error) {\n      console.log(\"Error: \", error);\n    }\n  }\n}\n\nasync function withdrawFunds(eventId) {\n  // If MetaMask exists\n  if (typeof window.ethereum !== \"undefined\") {\n    await requestAccount();\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(EVENT_TICKETING_ADDRESS, EventTicketing.abi, signer);\n\n    try {\n      const transaction = await contract.withdrawFunds(eventId);\n      await transaction.wait();\n    } catch (error) {\n      console.log(\"Error: \", error);\n    }\n  }\n}\n\nasync function updateEventDetails(eventId, name, description, imageUrl, date, totalTickets, ticketPrice) {\n  // If MetaMask exists\n  if (typeof window.ethereum !== \"undefined\") {\n    await requestAccount();\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(EVENT_TICKETING_ADDRESS, EventTicketing.abi, signer);\n    const formattedTicketPrice = ethers.utils.parseEther(`${ticketPrice}`);\n\n    try {\n      const transaction = await contract.updateEventDetails(eventId, name, description, imageUrl, date, totalTickets, formattedTicketPrice);\n      await transaction.wait();\n    } catch (error) {\n      console.log(\"Error: \", error);\n    }\n  }\n}\n\nasync function getAllEvents() {\n  // If MetaMask exists\n  if (typeof window.ethereum !== \"undefined\") {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const contract = new ethers.Contract(EVENT_TICKETING_ADDRESS, EventTicketing.abi, provider);\n\n    try {\n      const data = await contract.getAllEvents();\n      console.log(data);\n    } catch (error) {\n      console.log(\"Error: \", error);\n    }\n  }\n}\n\nexport { createEvent, purchaseTicket, enterEvent, closeEvent, withdrawFunds, updateEventDetails, getAllEvents };","map":{"version":3,"sources":["C:/Users/Admin/Desktop/prasamsa-event/src/services/EventTicketingService.js"],"names":["ethers","EventTicketing","EVENT_TICKETING_ADDRESS","requestAccount","window","ethereum","request","method","createEvent","name","description","imageUrl","date","totalTickets","ticketPrice","provider","providers","Web3Provider","signer","getSigner","contract","Contract","abi","formattedTicketPrice","utils","parseEther","transaction","wait","error","console","log","purchaseTicket","eventId","value","enterEvent","ticketId","closeEvent","withdrawFunds","updateEventDetails","getAllEvents","data"],"mappings":"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","sourcesContent":["import { ethers } from 'ethers';\n\n// Import ABI Code to interact with smart contract\nimport EventTicketing from '../artifacts/contracts/EventTicketing.sol/EventTicketing.json';\n\n// The contract address\nconst EVENT_TICKETING_ADDRESS = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\n\n// Requests access to the user's MetaMask Account\nasync function requestAccount() {\n  await window.ethereum.request({ method: \"eth_requestAccounts\" });\n}\n\nasync function createEvent(name, description, imageUrl, date, totalTickets, ticketPrice) {\n  // If MetaMask exists\n  if (typeof window.ethereum !== \"undefined\") {\n    await requestAccount();\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n\n    const contract = new ethers.Contract(EVENT_TICKETING_ADDRESS, EventTicketing.abi, signer);\n    const formattedTicketPrice = ethers.utils.parseEther(`${ticketPrice}`);\n\n    try {\n      const transaction = await contract.createEvent(name, description, imageUrl, date, totalTickets, formattedTicketPrice);\n      await transaction.wait();\n    } catch (error) {\n      console.log(\"Error: \", error);\n    }\n  }\n}\n\nasync function purchaseTicket(eventId, ticketPrice) {\n  // If MetaMask exists\n  if (typeof window.ethereum !== \"undefined\") {\n    await requestAccount();\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n\n    const contract = new ethers.Contract(EVENT_TICKETING_ADDRESS, EventTicketing.abi, signer);\n    const formattedTicketPrice = ethers.utils.parseEther(`${ticketPrice}`);\n\n    try {\n      const transaction = await contract.purchaseTicket(eventId, { value: formattedTicketPrice });\n      await transaction.wait();\n      console.log({transaction});\n    } catch (error) {\n      console.log(\"Error: \", error);\n    }\n  }\n}\n\nasync function enterEvent(ticketId) {\n  // If MetaMask exists\n  if (typeof window.ethereum !== \"undefined\") {\n    await requestAccount();\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n\n    const contract = new ethers.Contract(EVENT_TICKETING_ADDRESS, EventTicketing.abi, signer);\n\n    try {\n      const transaction = await contract.enterEvent(ticketId);\n      await transaction.wait();\n    } catch (error) {\n      console.log(\"Error: \", error);\n    }\n  }\n}\n\nasync function closeEvent(eventId) {\n  // If MetaMask exists\n  if (typeof window.ethereum !== \"undefined\") {\n    await requestAccount();\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n\n    const contract = new ethers.Contract(EVENT_TICKETING_ADDRESS, EventTicketing.abi, signer);\n\n    try {\n      const transaction = await contract.closeEvent(eventId);\n      await transaction.wait();\n    } catch (error) {\n      console.log(\"Error: \", error);\n    }\n  }\n}\n\nasync function withdrawFunds(eventId) {\n  // If MetaMask exists\n  if (typeof window.ethereum !== \"undefined\") {\n    await requestAccount();\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n\n    const contract = new ethers.Contract(EVENT_TICKETING_ADDRESS, EventTicketing.abi, signer);\n\n    try {\n      const transaction = await contract.withdrawFunds(eventId);\n      await transaction.wait();\n    } catch (error) {\n      console.log(\"Error: \", error);\n    }\n  }\n}\n\nasync function updateEventDetails(eventId, name, description, imageUrl, date, totalTickets, ticketPrice) {\n  // If MetaMask exists\n  if (typeof window.ethereum !== \"undefined\") {\n    await requestAccount();\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n\n    const contract = new ethers.Contract(EVENT_TICKETING_ADDRESS, EventTicketing.abi, signer);\n    const formattedTicketPrice = ethers.utils.parseEther(`${ticketPrice}`);\n\n    try {\n      const transaction = await contract.updateEventDetails(eventId, name, description, imageUrl, date, totalTickets, formattedTicketPrice);\n      await transaction.wait();\n    } catch (error) {\n      console.log(\"Error: \", error);\n    }\n  }\n}\n\nasync function getAllEvents() {\n  // If MetaMask exists\n  if (typeof window.ethereum !== \"undefined\") {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const contract = new ethers.Contract(EVENT_TICKETING_ADDRESS, EventTicketing.abi, provider);\n    try {\n      const data = await contract.getAllEvents();\n      console.log(data);\n    } catch (error) {\n      console.log(\"Error: \", error);\n    }\n  }\n}\n\nexport { createEvent, purchaseTicket, enterEvent, closeEvent, withdrawFunds, updateEventDetails, getAllEvents };\n"]},"metadata":{},"sourceType":"module"}